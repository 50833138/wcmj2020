<div class="gs">
<div class="">
<div class="ii gt" id=":m2">
<div class="a3s aXjCH" id=":m1">
<div dir="ltr">
<h1>網管</h1>
<h2>W2(3.13)</h2>
<p>建網站</p>
<p>此內容管理系統以<span> <a href="https://github.com/mdecourse/cmsimde">https:..github.com.mdecourse.cmsimde</a> </span>作為<span> submodule </span>運作<span>, </span>可以選定對應的版本運作<span>, cmsimde </span>可以持續改版<span>, </span>不會影響之前設為<span> submodule, </span>使用舊版<span> cmsimde </span>模組的內容管理相關運作<span>.</span></p>
<p>利用<span> cmsimde </span>建立靜態網誌方法<span>:</span></p>
<ol>
<li>在<span> github </span>建立倉儲<span>, git clone </span>到近端</li>
<li>參考<span><a href="https://github.com/mdecourse/newcms">https:..github.com.mdecourse.newcms</a>, </span>加入除了<span> cmsimde </span>目錄外的所有內容</li>
</ol>
<p>以<span> git submodule add <a href="https://github.com/mdecourse/cmsimde">https:..github.com.mdecourse.cmsimde</a> cmsimde</span></p>
<p>建立<span> cmsimde </span>目錄<span>, </span>並從<span> github </span>取下子模組內容<span>.</span></p>
<p>3.在近端維護時<span>, </span>更換目錄到倉儲中的<span> cmsimde, </span>以<span> python wsgi.py </span>啟動近端網際伺服器<span>.</span></p>
<p>動態內容編輯完成後<span>, </span>以<span> generate_pages </span>轉為靜態內容<span>, </span>以<span> git add commit </span>及<span> push </span>將內容推到遠端<span>.</span></p>
<ol start="4">
<li>之後若要以<span> git clone </span>取下包含<span> submodule </span>的所有內容<span>, </span>執行<span>:</span></li>
</ol>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https:..github.com.mdecourse.newcms.git</a></p>
<h2>W3(3.20)</h2>
<p>筆記</p>
<p>terminology 專業術語、<span>particular </span>特別、<span>technical </span>技術、<span>application </span>應用、</p>
<p>software 軟體、<span>hardware </span>硬體、<span>firmwarre </span>韌體、<span>machine language </span>機器語言、</p>
<p>URL:Uniform Resourse Locator  統一資源定位、<span>command wundow </span>命令視窗、<span>submodule </span>子模組</p>
<p>程式令<span>:</span></p>
<p>Y:←指<span>y</span>槽<span> Y:\   ←</span>表示<span>Y</span>槽的<span>root</span>根目錄<span> &gt; </span>為回應符號<span>(prormptsign)  \ </span>為<span>blackslash </span>反斜線<span> dir</span>為顯示目錄內容的指令<span> cd tmp </span>表示<span>change directory </span>到指定的目錄<span> git</span>為分散式版次管理的指令名稱<span> git clone</span>表示要使用<span>git</span>對遠端的倉儲進行<span>clone</span>。</p>
<h2>W4(3.27)</h2>
<p>portable 可攜、<span>Assembly </span>執行機器速度快但對硬體的相容性差、<span>objective -c</span></p>
<p>→開發<span>iphone</span>的前一代程式、<span>compile </span>編譯、<span>interpret </span>解譯、<span>unix</span>電腦系統的一種、<span>shell </span>殼、<span>graphics </span>圖形、<span>device </span>物件、<span>interface </span>介面</p>
<p>ps.c++ →加入物件功能的<span>C</span></p>
<h2>W5(4.3)</h2>
<p>掃墓<span>~~</span>休息</p>
<h2>W6(4.10)</h2>
<p>大致講解<span>↓</span>的用法和規格</p>
<p>portable obs →直播軟體</p>
<p><a href="http://meet.google.com/">meet.google.com</a>→google 的視訊軟體</p>
<p> </p>
<h2>W7(4.17)</h2>
<p>abunta→遠端操控電腦、<span>asscii </span>美國標準交換資訊碼。<span> </span></p>
<p>tmp&gt;wcmj2020&gt;init.py   更改網頁標題</p>
<h2>W8(4.24)</h2>
<br/>網站<span>push</span>的步驟
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"></pre>
<p>1.先把網站切成靜態<span>Home</span></p>
<p>2.git add空格<span>.   →</span>意思是跟電腦說現在要讀的東西</p>
<p>3.git comit -m"add w□" →跟電腦說你要讀的東西是什麼</p>
<p>4.git push →推上動態網頁</p>
<p>讓我們實作一次分組，弄<span><a href="http://meet.google.com/">meet.google.com</a></span>的實際操作。好讓下次上課可以線上上課。</p>
<p> </p>
<h2> W9(5.1)</h2>
<div id="tipue_search_content">
<h1>電腦軟體與硬體簡介</h1>
<p>Type of Computer：</p>
<p>super computer 超級電腦</p>
<p>MainFrane 伺服器主機</p>
<p>Server 伺服器</p>
<p>PC 個人電腦</p>
<p>Microcontroler 微電腦</p>
<p>Mobile Phone 手機</p>
<table border="0" cellpadding="5" cellspacing="0" width="99%">
<tbody>
<tr>
<td class="FONT18_棕色底table" width="120">硬體名稱</td>
<td class="FONT18_棕色底table" width="391">說明</td>
<td class="FONT18_棕色底table" width="378">比喻</td>
</tr>
<tr>
<td class="THIN_Border" valign="top"><a href="http://www.digitaler.net/CLASS360/intro/04/04.html#2A" onclick="MM_openBrWindow('images/cpu.jpg','','width=450,height=370')">CPU</a></td>
<td class="THIN_Border" valign="top">中央處理器，電腦的心臟，速度越快效率越好。新一代的電腦甚至可以有多核心（兩個以上的CPU）。</td>
<td class="THIN_Border" valign="top">如果將主機比喻為一家商店，那CPU可以說是店員，動作越快、反應越靈巧的店員可以增加銷售的速度。</td>
</tr>
<tr>
<td class="THIN_Border" valign="top"><a href="http://www.digitaler.net/CLASS360/intro/04/04.html#2A" onclick="MM_openBrWindow('images/ram.jpg','','width=420,height=280')">記憶體RAM</a></td>
<td class="THIN_Border" valign="top">電腦系統運作時暫時儲存資料的地方，其大小也是影響電腦速率快慢的重要因素，建議入門最起碼可以使用2G。因為記憶體大小很重要、而且價格不貴、又不容易損壞，因此「寧可過剩、不要不足」。</td>
<td class="THIN_Border" valign="top">猶如商店的賣場面積，賣場越大可以擺的東西越多，客人需要即可直接銷售，而不必進入貨倉中翻箱倒櫃，浪費時間、拖垮效率。</td>
</tr>
<tr>
<td class="THIN_Border" valign="top"><a href="http://www.digitaler.net/CLASS360/intro/04/04.html#2A" onclick="MM_openBrWindow('images/Harddisk_1.jpg','','width=720,height=570')">硬碟</a></td>
<td class="THIN_Border" valign="top">儲存系統軟體、應用軟體以及資料的儲存空間，目前一般大小約為數百G，一台主機可以裝多顆硬碟。</td>
<td class="THIN_Border" valign="top">猶如貨倉的大小，貨倉越大當然可以囤積的商品越多。</td>
</tr>
<tr>
<td class="THIN_Border" onfocus="MM_openBrWindow('images/DVD.jpg','','width=420,height=420')" valign="top"><a href="http://www.digitaler.net/CLASS360/intro/04/04.html#2A" onclick="MM_openBrWindow('images/dvd.jpg','','width=720,height=410')">光碟機、<br/>燒錄機</a></td>
<td class="THIN_Border" valign="top">光碟機：只能讀取CD、DVD（含音樂、影片及資料），古董機。<br/>燒錄機：本身已經具備讀取功能，並且能夠將各類檔案燒錄於光碟片上，並製作為音樂CD、影片DVD、或純粹備份資料片等，為目前的主流規格。</td>
<td class="THIN_Border" valign="top"> </td>
</tr>
<tr>
<td class="THIN_Border" valign="top"><a href="http://www.digitaler.net/CLASS360/intro/04/04.html#2A" onclick="MM_openBrWindow('images/62-in-1-card-reader.jpg','','width=490,height=310')">讀卡機</a></td>
<td class="THIN_Border" valign="top">擁有不同的插槽、能夠讀取多種格式的記憶卡。</td>
<td class="THIN_Border" valign="top"> </td>
</tr>
</tbody>
</table>
<br/>w9 &lt;&lt;<span> </span><a href="https://50833129.github.io/wcmj2020/content/w9.html">Previous</a><span> </span><a href="https://50833129.github.io/wcmj2020/content/%E5%85%8D%E8%B2%BB%E8%BB%9F%E9%AB%94%20(Freeware).html">Next</a><span> </span>&gt;&gt; 網路架構與設定簡介

</div>
<div>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></div>
<div class="container">
<div class="row pt-3 mx-auto"></div>
</div>
<p> </p>
<div id="tipue_search_content">
<h1>網路架構與設定簡介</h1>
<p>第一個步驟:cd tmp</p>
<p>再來 cd wcmj2020</p>
<p>第三部:cd cmsimde</p>
<p>第四部:python wsgi.py</p>
<p>架構:<span>網路架構模型分為4層，也就是經常聽到的DoD（Department of Defense）或是TCP/IP模型，如附圖所示，最上層為應用層（Application  Layer），接下來依據為傳輸層（Transport Layer）、網路層（Internet Layer）、鏈結層（Link Layer）。這4層分工需要相互合作，卻又彼此獨立，好比寄信一般，需要郵局處理郵件，道路和交通工具負責運送，信才可送達目的地，但是你卻不用管郵局如何經營、交通工具如何設計、道路怎麼鋪設才會平坦又耐用。</span><span>將網路架構分層出來，便加入了許多可能性，只要符合這個網路模型，各層如何處理資訊的方式就各自獨立，不受其它外在條件的限制。舉個小小例子，筆電能夠透過有線和無線方式連上網路，但是這2種傳輸介質所看到的網頁有所差異嗎？應該不會發生有線介面看到Dream Girls，換成無線介面就變閃亮三姊妹這種情形。同時，分層模型所具備的向後相容性也可以在無線傳輸規格上看到，從現今的802.11 a/b/g/n，到未來的802.11 ac/ad，均能夠傳送網頁資料，讀者應該也沒有聽過換個傳輸規格，網頁就要重寫這種荒唐事。</span></p>
<br/>綠色軟體 (Greenware) &lt;&lt;<span> </span><a href="https://50833129.github.io/wcmj2020/content/%E7%B6%A0%E8%89%B2%E8%BB%9F%E9%AB%94%20(Greenware).html">Previous</a><span> </span><a href="https://50833129.github.io/wcmj2020/content/W10.html">Next</a><span> </span>&gt;&gt; W10</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorli</a>b</p>
<p></p>
<h2>W10(5.8)</h2>
<div id="tipue_search_content">
<p><span>SSH===安全編碼機制</span></p>
<p><span>Public key 公開密鑰加密器</span></p>
<p><span>Cryptography 編碼學</span></p>
<p><span>Putty:EREE SSH FOR WINDOW</span></p>
<p><span>設置:移動滑鼠</span></p>
<p>ssh-keygen -t rsa -b 4096 -C "50833129"</p>
<p>pwd:print working directory</p>
<br/>網路架構與設定簡介 &lt;&lt;<span> </span><a href="https://50833129.github.io/wcmj2020/content/%E7%B6%B2%E8%B7%AF%E6%9E%B6%E6%A7%8B%E8%88%87%E8%A8%AD%E5%AE%9A%E7%B0%A1%E4%BB%8B.html">Previous</a><span> </span><a href="https://50833129.github.io/wcmj2020/content/w12-13.html">Next</a><span> </span>&gt;&gt; w12-13</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
<p></p>
<h2>W12(5.15)</h2>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>W13(5.22)</h2>
<p></p>
<div id="tipue_search_content">
<p>Pelican Blog 內容與 Google Blogger 同步</p>
<p>利用 Windows 10 設定 -&gt; 選擇預設網頁瀏覽器, 使用 Google Chrome 作為預設瀏覽器.</p>
<p>隨身程式系統必須安裝 <span>google-api-python-client 與 oauth2client</span><br/><br/>pip install google-api-python-client oauth2client<br/><br/>OAuth 2.0 client IDs 程式類別可以選擇 other<br/><br/>使用者完成 client_secrets.json 設定後, 必須將檔案存在倉儲目錄外部</p>
<p>add_to_blogger 按鈕內容:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_74057">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
<div class="line number81 index80 alt2">81</div>
<div class="line number82 index81 alt1">82</div>
<div class="line number83 index82 alt2">83</div>
<div class="line number84 index83 alt1">84</div>
<div class="line number85 index84 alt2">85</div>
<div class="line number86 index85 alt1">86</div>
<div class="line number87 index86 alt2">87</div>
<div class="line number88 index87 alt1">88</div>
<div class="line number89 index88 alt2">89</div>
<div class="line number90 index89 alt1">90</div>
<div class="line number91 index90 alt2">91</div>
<div class="line number92 index91 alt1">92</div>
<div class="line number93 index92 alt2">93</div>
<div class="line number94 index93 alt1">94</div>
<div class="line number95 index94 alt2">95</div>
<div class="line number96 index95 alt1">96</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">markdown </code><code class="py keyword">import</code> <code class="py plain">markdown</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">oauth2client </code><code class="py keyword">import</code> <code class="py plain">client</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code> <code class="py plain">googleapiclient </code><code class="py keyword">import</code> <code class="py plain">sample_tools</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="py plain">os.environ[</code><code class="py string">'TZ'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py string">'Asia/Taipei'</code></div>
<div class="line number7 index6 alt2"><code class="py plain">argv </code><code class="py keyword">=</code> <code class="py plain">""</code></div>
<div class="line number8 index7 alt1"><code class="py comments"># 認證並建立服務</code></div>
<div class="line number9 index8 alt2"><code class="py comments"># name of the api is "blogger", version is "v3"</code></div>
<div class="line number10 index9 alt1"><code class="py comments"># description of the api is __doc__</code></div>
<div class="line number11 index10 alt2"><code class="py comments"># file name of the application: location of client_secrets.json</code></div>
<div class="line number12 index11 alt1"><code class="py plain">service, flags </code><code class="py keyword">=</code> <code class="py plain">sample_tools.init(</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">  </code><code class="py plain">argv, </code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, __doc__, </code><code class="py string">"./../../client_secrets.json"</code><code class="py plain">,</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">  </code><code class="py plain">scope</code><code class="py keyword">=</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">)</code></div>
<div class="line number15 index14 alt2"> </div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code> <code class="py plain">get_cat_tag_content(data):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py comments"># 用跳行符號分割</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">data_list </code><code class="py keyword">=</code> <code class="py plain">data.split(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py comments">#第 2 行為 title</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py plain">title</code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py comments">#第 4 行為 category</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">3</code><code class="py plain">]</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py comments">#第 5 行為 tags</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">4</code><code class="py plain">]</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 有多項資料的 content 型別為數列</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py comments"># 再將第 9 行之後的資料數列串回成以跳行隔開的資料</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py string">"\n"</code><code class="py plain">.join(data_list[</code><code class="py value">8</code><code class="py plain">:])</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments"># 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">'&lt;!-- PELICAN_END_SUMMARY --&gt;'</code><code class="py plain">, </code><code class="py string">'&lt;!--more--&gt;'</code><code class="py plain">)</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py comments"># 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~python', '[code lang="python"]')</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~', '[/code]')</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">title, category, tags, content</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="py comments"># 從目前所在節點的 body pan 中取出類別, tags 以及文章內容</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># p.h 為 @clean filename.md</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案</code></div>
<div class="line number40 index39 alt1"><code class="py plain">md_filename </code><code class="py keyword">=</code> <code class="py plain">p.h.split(</code><code class="py string">" "</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number41 index40 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(md_filename, </code><code class="py string">'r'</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as content_file:</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">md_content </code><code class="py keyword">=</code> <code class="py plain">content_file.read()</code></div>
<div class="line number43 index42 alt2"><code class="py comments"># title_str, category_str, tags_str, content = get_cat_tag_content(p.b)</code></div>
<div class="line number44 index43 alt1"><code class="py plain">title_str, category_str, tags_str, content </code><code class="py keyword">=</code> <code class="py plain">get_cat_tag_content(md_content)</code></div>
<div class="line number45 index44 alt2"><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">category_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number46 index45 alt1"><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">tags_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">].split(</code><code class="py string">","</code><code class="py plain">)</code></div>
<div class="line number47 index46 alt2"><code class="py plain">tags.append(category)</code></div>
<div class="line number48 index47 alt1"><code class="py comments"># title 是一個單獨的字串</code></div>
<div class="line number49 index48 alt2"><code class="py plain">title </code><code class="py keyword">=</code> <code class="py plain">title_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number50 index49 alt1"><code class="py comments"># 將 markdown 格式 content 轉為 html</code></div>
<div class="line number51 index50 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">markdown(content)</code></div>
<div class="line number52 index51 alt1"><code class="py comments"># 以下處理 content 的 &lt;h2&gt; 標題</code></div>
<div class="line number53 index52 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;h2&gt;&lt;font size='4'&gt;"</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;/h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;/font&gt;&lt;/h2&gt;"</code><code class="py plain">)</code></div>
<div class="line number55 index54 alt2"><code class="py comments"># g.es(content)</code></div>
<div class="line number56 index55 alt1"> </div>
<div class="line number57 index56 alt2"><code class="py keyword">try</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py comments">'''</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py comments">users = service.users()</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py comments"># 取得使用者 profile 資料</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py comments">user = users.get(userId='self').execute()</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py comments">print('網誌名稱: %s' % user['displayName'])</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py comments">'''</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">service.blogs()</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py comments"># 取得使用者所建立網誌名稱</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">blogs.listByUser(userId</code><code class="py keyword">=</code><code class="py string">'self'</code><code class="py plain">).execute()</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments"># post_id is now blogs["items"][0]["id"]</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">blog_id </code><code class="py keyword">=</code> <code class="py plain">blogs[</code><code class="py string">"items"</code><code class="py plain">][</code><code class="py value">0</code><code class="py plain">][</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py comments">#for blog in blogs['items']:</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">        </code><code class="py comments">#print(blog['name'], blog['url'])</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py plain">posts </code><code class="py keyword">=</code> <code class="py plain">service.posts()</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">    </code><code class="py comments"># 新增網誌 post 時, 需要 post_id</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">    </code><code class="py plain">body </code><code class="py keyword">=</code> <code class="py plain">{</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py string">"kind"</code><code class="py plain">: </code><code class="py string">"blogger#post"</code><code class="py plain">,</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py string">"id"</code><code class="py plain">: blog_id,</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">    </code><code class="py string">"title"</code><code class="py plain">: title,</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py comments"># 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">    </code><code class="py string">"content"</code><code class="py plain">: content,</code></div>
<div class="line number79 index78 alt2"><code class="py spaces">    </code><code class="py string">"labels"</code><code class="py plain">: tags</code></div>
<div class="line number80 index79 alt1"><code class="py spaces">    </code><code class="py plain">}</code></div>
<div class="line number81 index80 alt2"><code class="py spaces">    </code><code class="py plain">insert </code><code class="py keyword">=</code> <code class="py plain">posts.insert(blogId</code><code class="py keyword">=</code><code class="py plain">blog_id, body</code><code class="py keyword">=</code><code class="py plain">body)</code></div>
<div class="line number82 index81 alt1"><code class="py spaces">    </code><code class="py plain">posts_doc </code><code class="py keyword">=</code> <code class="py plain">insert.execute()</code></div>
<div class="line number83 index82 alt2"><code class="py spaces">    </code><code class="py plain">post_id </code><code class="py keyword">=</code> <code class="py plain">posts_doc[</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number84 index83 alt1"><code class="py spaces">    </code><code class="py comments">#print(posts_doc)</code></div>
<div class="line number85 index84 alt2"><code class="py spaces">    </code><code class="py plain">os.remove(</code><code class="py string">"blogger.dat"</code><code class="py plain">)</code></div>
<div class="line number86 index85 alt1"><code class="py spaces">    </code><code class="py comments"># 利用最後的 child 節點來儲存 post_id</code></div>
<div class="line number87 index86 alt2"><code class="py spaces">    </code><code class="py plain">to_save_post_id </code><code class="py keyword">=</code> <code class="py plain">p.insertAsLastChild()   </code></div>
<div class="line number88 index87 alt1"><code class="py spaces">    </code><code class="py comments"># 改為內文為空的節點, id 直接標在 head 標題 </code></div>
<div class="line number89 index88 alt2"><code class="py spaces">    </code><code class="py plain">to_save_post_id.b </code><code class="py keyword">=</code> <code class="py plain">""</code></div>
<div class="line number90 index89 alt1"><code class="py spaces">    </code><code class="py plain">to_save_post_id.h </code><code class="py keyword">=</code> <code class="py plain">post_id</code></div>
<div class="line number91 index90 alt2"><code class="py spaces">    </code><code class="py comments"># 因為新增節點, commander 必須 redraw</code></div>
<div class="line number92 index91 alt1"><code class="py spaces">    </code><code class="py plain">c.redraw()</code></div>
<div class="line number93 index92 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"post_id 為"</code><code class="py plain">, post_id)</code></div>
<div class="line number94 index93 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"已經將資料送往 Blogger!"</code><code class="py plain">)</code></div>
<div class="line number95 index94 alt2"><code class="py keyword">except</code><code class="py plain">(client.AccessTokenRefreshError):</code></div>
<div class="line number96 index95 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"error"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>edit_to_blogger 按鈕內容:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_479709">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
<div class="line number18 index17 alt1">18</div>
<div class="line number19 index18 alt2">19</div>
<div class="line number20 index19 alt1">20</div>
<div class="line number21 index20 alt2">21</div>
<div class="line number22 index21 alt1">22</div>
<div class="line number23 index22 alt2">23</div>
<div class="line number24 index23 alt1">24</div>
<div class="line number25 index24 alt2">25</div>
<div class="line number26 index25 alt1">26</div>
<div class="line number27 index26 alt2">27</div>
<div class="line number28 index27 alt1">28</div>
<div class="line number29 index28 alt2">29</div>
<div class="line number30 index29 alt1">30</div>
<div class="line number31 index30 alt2">31</div>
<div class="line number32 index31 alt1">32</div>
<div class="line number33 index32 alt2">33</div>
<div class="line number34 index33 alt1">34</div>
<div class="line number35 index34 alt2">35</div>
<div class="line number36 index35 alt1">36</div>
<div class="line number37 index36 alt2">37</div>
<div class="line number38 index37 alt1">38</div>
<div class="line number39 index38 alt2">39</div>
<div class="line number40 index39 alt1">40</div>
<div class="line number41 index40 alt2">41</div>
<div class="line number42 index41 alt1">42</div>
<div class="line number43 index42 alt2">43</div>
<div class="line number44 index43 alt1">44</div>
<div class="line number45 index44 alt2">45</div>
<div class="line number46 index45 alt1">46</div>
<div class="line number47 index46 alt2">47</div>
<div class="line number48 index47 alt1">48</div>
<div class="line number49 index48 alt2">49</div>
<div class="line number50 index49 alt1">50</div>
<div class="line number51 index50 alt2">51</div>
<div class="line number52 index51 alt1">52</div>
<div class="line number53 index52 alt2">53</div>
<div class="line number54 index53 alt1">54</div>
<div class="line number55 index54 alt2">55</div>
<div class="line number56 index55 alt1">56</div>
<div class="line number57 index56 alt2">57</div>
<div class="line number58 index57 alt1">58</div>
<div class="line number59 index58 alt2">59</div>
<div class="line number60 index59 alt1">60</div>
<div class="line number61 index60 alt2">61</div>
<div class="line number62 index61 alt1">62</div>
<div class="line number63 index62 alt2">63</div>
<div class="line number64 index63 alt1">64</div>
<div class="line number65 index64 alt2">65</div>
<div class="line number66 index65 alt1">66</div>
<div class="line number67 index66 alt2">67</div>
<div class="line number68 index67 alt1">68</div>
<div class="line number69 index68 alt2">69</div>
<div class="line number70 index69 alt1">70</div>
<div class="line number71 index70 alt2">71</div>
<div class="line number72 index71 alt1">72</div>
<div class="line number73 index72 alt2">73</div>
<div class="line number74 index73 alt1">74</div>
<div class="line number75 index74 alt2">75</div>
<div class="line number76 index75 alt1">76</div>
<div class="line number77 index76 alt2">77</div>
<div class="line number78 index77 alt1">78</div>
<div class="line number79 index78 alt2">79</div>
<div class="line number80 index79 alt1">80</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py keyword">from</code> <code class="py plain">markdown </code><code class="py keyword">import</code> <code class="py plain">markdown</code></div>
<div class="line number2 index1 alt1"><code class="py keyword">from</code> <code class="py plain">oauth2client </code><code class="py keyword">import</code> <code class="py plain">client</code></div>
<div class="line number3 index2 alt2"><code class="py keyword">from</code> <code class="py plain">googleapiclient </code><code class="py keyword">import</code> <code class="py plain">sample_tools</code></div>
<div class="line number4 index3 alt1"><code class="py keyword">import</code> <code class="py plain">os</code></div>
<div class="line number5 index4 alt2"> </div>
<div class="line number6 index5 alt1"><code class="py plain">os.environ[</code><code class="py string">'TZ'</code><code class="py plain">] </code><code class="py keyword">=</code> <code class="py string">'Asia/Taipei'</code></div>
<div class="line number7 index6 alt2"><code class="py plain">argv </code><code class="py keyword">=</code> <code class="py plain">""</code></div>
<div class="line number8 index7 alt1"><code class="py comments"># 認證並建立服務</code></div>
<div class="line number9 index8 alt2"><code class="py comments"># name of the api is "blogger", version is "v3"</code></div>
<div class="line number10 index9 alt1"><code class="py comments"># description of the api is __doc__</code></div>
<div class="line number11 index10 alt2"><code class="py comments"># file name of the application: location of client_secrets.json</code></div>
<div class="line number12 index11 alt1"><code class="py plain">service, flags </code><code class="py keyword">=</code> <code class="py plain">sample_tools.init(</code></div>
<div class="line number13 index12 alt2"><code class="py spaces">  </code><code class="py plain">argv, </code><code class="py string">'blogger'</code><code class="py plain">, </code><code class="py string">'v3'</code><code class="py plain">, __doc__, </code><code class="py string">"./../../client_secrets.json"</code><code class="py plain">,</code></div>
<div class="line number14 index13 alt1"><code class="py spaces">  </code><code class="py plain">scope</code><code class="py keyword">=</code><code class="py string">'https://www.googleapis.com/auth/blogger'</code><code class="py plain">)</code></div>
<div class="line number15 index14 alt2"> </div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="py keyword">def</code> <code class="py plain">get_cat_tag_content(data):</code></div>
<div class="line number18 index17 alt1"><code class="py spaces">    </code><code class="py comments"># 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---</code></div>
<div class="line number19 index18 alt2"><code class="py spaces">    </code><code class="py comments"># 用跳行符號分割</code></div>
<div class="line number20 index19 alt1"><code class="py spaces">    </code><code class="py plain">data_list </code><code class="py keyword">=</code> <code class="py plain">data.split(</code><code class="py string">"\n"</code><code class="py plain">)</code></div>
<div class="line number21 index20 alt2"><code class="py spaces">    </code><code class="py comments">#第 2 行為 title</code></div>
<div class="line number22 index21 alt1"><code class="py spaces">    </code><code class="py plain">title</code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number23 index22 alt2"><code class="py spaces">    </code><code class="py comments">#第 4 行為 category</code></div>
<div class="line number24 index23 alt1"><code class="py spaces">    </code><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">3</code><code class="py plain">]</code></div>
<div class="line number25 index24 alt2"><code class="py spaces">    </code><code class="py comments">#第 5 行為 tags</code></div>
<div class="line number26 index25 alt1"><code class="py spaces">    </code><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">data_list[</code><code class="py value">4</code><code class="py plain">]</code></div>
<div class="line number27 index26 alt2"><code class="py spaces">    </code><code class="py comments"># 有多項資料的 content 型別為數列</code></div>
<div class="line number28 index27 alt1"><code class="py spaces">    </code><code class="py comments"># 再將第 9 行之後的資料數列串回成以跳行隔開的資料</code></div>
<div class="line number29 index28 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py string">"\n"</code><code class="py plain">.join(data_list[</code><code class="py value">8</code><code class="py plain">:])</code></div>
<div class="line number30 index29 alt1"><code class="py spaces">    </code><code class="py comments"># 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;</code></div>
<div class="line number31 index30 alt2"><code class="py spaces">    </code><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">'&lt;!-- PELICAN_END_SUMMARY --&gt;'</code><code class="py plain">, </code><code class="py string">'&lt;!--more--&gt;'</code><code class="py plain">)</code></div>
<div class="line number32 index31 alt1"><code class="py spaces">    </code><code class="py comments"># 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式</code></div>
<div class="line number33 index32 alt2"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~python', '[code lang="python"]')</code></div>
<div class="line number34 index33 alt1"><code class="py spaces">    </code><code class="py comments">#content = content.replace('~~~', '[/code]')</code></div>
<div class="line number35 index34 alt2"><code class="py spaces">    </code><code class="py keyword">return</code> <code class="py plain">title, category, tags, content</code></div>
<div class="line number36 index35 alt1"> </div>
<div class="line number37 index36 alt2"><code class="py comments"># 從目前所在節點的 body pan 中取出類別, tags 以及文章內容</code></div>
<div class="line number38 index37 alt1"><code class="py comments"># p.h 為 @clean filename.md</code></div>
<div class="line number39 index38 alt2"><code class="py comments"># 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案</code></div>
<div class="line number40 index39 alt1"><code class="py plain">md_filename </code><code class="py keyword">=</code> <code class="py plain">p.h.split(</code><code class="py string">" "</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number41 index40 alt2"><code class="py plain">with </code><code class="py functions">open</code><code class="py plain">(md_filename, </code><code class="py string">'r'</code><code class="py plain">, encoding</code><code class="py keyword">=</code><code class="py string">"utf-8"</code><code class="py plain">) as content_file:</code></div>
<div class="line number42 index41 alt1"><code class="py spaces">    </code><code class="py plain">md_content </code><code class="py keyword">=</code> <code class="py plain">content_file.read()</code></div>
<div class="line number43 index42 alt2"><code class="py comments"># title_str, category_str, tags_str, content = get_cat_tag_content(p.b)</code></div>
<div class="line number44 index43 alt1"><code class="py plain">title_str, category_str, tags_str, content </code><code class="py keyword">=</code> <code class="py plain">get_cat_tag_content(md_content)</code></div>
<div class="line number45 index44 alt2"><code class="py plain">category </code><code class="py keyword">=</code> <code class="py plain">category_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number46 index45 alt1"><code class="py plain">tags </code><code class="py keyword">=</code> <code class="py plain">tags_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">].split(</code><code class="py string">","</code><code class="py plain">)</code></div>
<div class="line number47 index46 alt2"><code class="py plain">tags.append(category)</code></div>
<div class="line number48 index47 alt1"><code class="py comments"># title 是一個單獨的字串</code></div>
<div class="line number49 index48 alt2"><code class="py plain">title </code><code class="py keyword">=</code> <code class="py plain">title_str.split(</code><code class="py string">":"</code><code class="py plain">)[</code><code class="py value">1</code><code class="py plain">]</code></div>
<div class="line number50 index49 alt1"><code class="py comments"># 將 markdown 格式 content 轉為 html</code></div>
<div class="line number51 index50 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">markdown(content)</code></div>
<div class="line number52 index51 alt1"><code class="py comments"># 以下處理 content 的 &lt;h2&gt; 標題</code></div>
<div class="line number53 index52 alt2"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;h2&gt;&lt;font size='4'&gt;"</code><code class="py plain">)</code></div>
<div class="line number54 index53 alt1"><code class="py plain">content </code><code class="py keyword">=</code> <code class="py plain">content.replace(</code><code class="py string">"&lt;/h2&gt;"</code><code class="py plain">, </code><code class="py string">"&lt;/font&gt;&lt;/h2&gt;"</code><code class="py plain">)</code></div>
<div class="line number55 index54 alt2"><code class="py comments"># g.es(content)</code></div>
<div class="line number56 index55 alt1"> </div>
<div class="line number57 index56 alt2"><code class="py keyword">try</code><code class="py plain">:</code></div>
<div class="line number58 index57 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">service.blogs()</code></div>
<div class="line number59 index58 alt2"><code class="py spaces">    </code><code class="py comments"># 取得使用者所建立網誌名稱</code></div>
<div class="line number60 index59 alt1"><code class="py spaces">    </code><code class="py plain">blogs </code><code class="py keyword">=</code> <code class="py plain">blogs.listByUser(userId</code><code class="py keyword">=</code><code class="py string">'self'</code><code class="py plain">).execute()</code></div>
<div class="line number61 index60 alt2"><code class="py spaces">    </code><code class="py plain">blog_id </code><code class="py keyword">=</code> <code class="py plain">blogs[</code><code class="py string">"items"</code><code class="py plain">][</code><code class="py value">0</code><code class="py plain">][</code><code class="py string">"id"</code><code class="py plain">]</code></div>
<div class="line number62 index61 alt1"><code class="py spaces">    </code><code class="py comments"># 設法取得原 post 的 id</code></div>
<div class="line number63 index62 alt2"><code class="py spaces">    </code><code class="py plain">postid_outline </code><code class="py keyword">=</code> <code class="py plain">p.getLastChild()</code></div>
<div class="line number64 index63 alt1"><code class="py spaces">    </code><code class="py comments"># 直接從標題取得 post 的 id 號碼</code></div>
<div class="line number65 index64 alt2"><code class="py spaces">    </code><code class="py plain">post_id </code><code class="py keyword">=</code> <code class="py plain">postid_outline.h</code></div>
<div class="line number66 index65 alt1"><code class="py spaces">    </code><code class="py plain">posts </code><code class="py keyword">=</code> <code class="py plain">service.posts()</code></div>
<div class="line number67 index66 alt2"><code class="py spaces">    </code><code class="py comments"># 更新網誌文章時的 body</code></div>
<div class="line number68 index67 alt1"><code class="py spaces">    </code><code class="py plain">body </code><code class="py keyword">=</code> <code class="py plain">{</code></div>
<div class="line number69 index68 alt2"><code class="py spaces">    </code><code class="py string">"kind"</code><code class="py plain">: </code><code class="py string">"blogger#post"</code><code class="py plain">,</code></div>
<div class="line number70 index69 alt1"><code class="py spaces">    </code><code class="py string">"title"</code><code class="py plain">: title,</code></div>
<div class="line number71 index70 alt2"><code class="py spaces">    </code><code class="py string">"content"</code><code class="py plain">: content</code></div>
<div class="line number72 index71 alt1"><code class="py spaces">    </code><code class="py plain">}</code></div>
<div class="line number73 index72 alt2"><code class="py spaces">    </code><code class="py comments"># need to save postId to outline head</code></div>
<div class="line number74 index73 alt1"><code class="py spaces">    </code><code class="py plain">update </code><code class="py keyword">=</code> <code class="py plain">posts.update(blogId</code><code class="py keyword">=</code><code class="py plain">blog_id, postId</code><code class="py keyword">=</code><code class="py plain">post_id, body</code><code class="py keyword">=</code><code class="py plain">body, publish</code><code class="py keyword">=</code><code class="py color1">True</code><code class="py plain">)</code></div>
<div class="line number75 index74 alt2"><code class="py spaces">    </code><code class="py plain">update_doc </code><code class="py keyword">=</code> <code class="py plain">update.execute()</code></div>
<div class="line number76 index75 alt1"><code class="py spaces">    </code><code class="py plain">os.remove(</code><code class="py string">"blogger.dat"</code><code class="py plain">)</code></div>
<div class="line number77 index76 alt2"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"post_id 為"</code><code class="py plain">, post_id)</code></div>
<div class="line number78 index77 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"已經將更新資料送往 Blogger!"</code><code class="py plain">)</code></div>
<div class="line number79 index78 alt2"><code class="py keyword">except</code><code class="py plain">(client.AccessTokenRefreshError):</code></div>
<div class="line number80 index79 alt1"><code class="py spaces">    </code><code class="py plain">g.es(</code><code class="py string">"error"</code><code class="py plain">)</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p></p>
<br/>W12 &lt;&lt;<span> </span><a href="https://50833129.github.io/wcmj2020/content/W12.html">Previous</a><span> </span><a href="https://50833129.github.io/wcmj2020/content/w14.html">Next</a><span> </span>&gt;&gt; w14</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
<p></p>
<h2>W14(5.29)</h2>
<p></p>
<h1>MacBook 操作指南</h1>
<div id="tipue_search_content">
<h4>參考資料:</h4>
<p><a href="https://drive.google.com/open?id=1zIJkMnFNb0QYsBbzlxAvw8t7hZdZc0hh">Mac OS X for Absolute Beginners.pdf</a><span> </span>(for @gm users only)</p>
<p><a href="https://drive.google.com/open?id=1hl53RvI1sPFDuF63_TvjuuS-9y9ZQiO3">Learn C on the Mac.pdf</a><span> </span>(for @gm users only)</p>
<p>這裡以 MacBook Air 2012 年出廠, 硬體規格:</p>
<p>macOS Catalina Version 10.15.4</p>
<p>1.8 GHz Dual-Core Intel Core i5</p>
<p>Memory $GB 1600 MHz DDR3</p>
<p>Graphics Intel HD Graphics 4000 1536 MB</p>
<p>的操作為例, 如何存活在機械設計工程系與精密機械工程科的網際內容管理課程.</p>
<p>由於網際內容管理課程主要以 Ｗindows 10 64 位元操作系統中的 Python 3 可攜程式環境使用為主.</p>
<h4>從官方網站下載安裝 Python3</h4>
<p>因此 Catalina 系統中的首要任務, 便是安裝 Python 3:</p>
<p>在 2020.05.15 從<span> </span><a href="https://www.python.org/downloads/mac-osx/">https://www.python.org/downloads/mac-osx/</a><span> </span>可以下載安裝最新的 Python 3.8.3 解譯環境.</p>
<h4>安裝 pip3</h4>
<p>有了 python 3 環境之後, 就可以從 Lanuchpad -&gt; Other -&gt; Terminal 開啟終端機, 並從 get-pip.py 下載用來安裝 pip3 的程式碼, 以終端機上的指令進行安裝:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_576224">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">sudo python3 get-pip.py</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>安裝 pip3 之後, 可以安裝 CMSiMDE 所需的 flask, flask_cors, lxml, bs4, markdown, pelican 以及 leo:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_925789">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">sudo pip3 install flask flask_cors lxml bs4 markdown pelican leo</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<h4>安裝 XQuartz</h4>
<p>之後, 就可以安裝<span> </span><a href="https://www.xquartz.org/">XQuartz</a>, 以便使用 xterm 替代 terminal.</p>
<p>接下來假如要使用 SciTE 作為文字編輯器, 建議透過<span> </span><a href="https://www.macports.org/install.php">https://www.macports.org/install.php</a>  先根據 Catalina 操作系統版本安裝 Macports 之後, 再利用:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_996957">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">sudo port install scite</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>安裝 SciTE 文字編輯器.</p>
<p>至此, 再加上 Catalina 原有的 git 指令, 使用者已經可以在 MacBook 上執行與 Windows 10 64 位元操作系統上相同的:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_254132">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
<div class="line number13 index12 alt2">13</div>
<div class="line number14 index13 alt1">14</div>
<div class="line number15 index14 alt2">15</div>
<div class="line number16 index15 alt1">16</div>
<div class="line number17 index16 alt2">17</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">git clone --recurse-submodules</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="js plain">git add .</code></div>
<div class="line number4 index3 alt1"> </div>
<div class="line number5 index4 alt2"><code class="js plain">git commit -m </code><code class="js string">"commit message"</code></div>
<div class="line number6 index5 alt1"> </div>
<div class="line number7 index6 alt2"><code class="js plain">git push</code></div>
<div class="line number8 index7 alt1"> </div>
<div class="line number9 index8 alt2"><code class="js plain">git pull</code></div>
<div class="line number10 index9 alt1"> </div>
<div class="line number11 index10 alt2"><code class="js plain">git submodule add</code></div>
<div class="line number12 index11 alt1"> </div>
<div class="line number13 index12 alt2"><code class="js plain">git remote add</code></div>
<div class="line number14 index13 alt1"> </div>
<div class="line number15 index14 alt2"><code class="js plain">git branch</code></div>
<div class="line number16 index15 alt1"> </div>
<div class="line number17 index16 alt2"><code class="js plain">git merge</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>等指令, 只是在執行 python 程式時, 必須使用:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_530075">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">python3 wsgi.py</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="js plain">pip3 install certain_module</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>否則直接使用 python 執行, 將會用 Python 2.7 環境執行而產生錯誤.</p>
<h4>其他建議安裝套件</h4>
<p>Microsoft Remote Desktop</p>
<p>Firefox</p>
<p>OBS</p>
<p>Visual Studio Code</p>
<p><a href="https://drive.google.com/open?id=1VeO6HfA3eq8kn5q9m2iJ8SdGCVwUhizo">Visual Studio Code Distilled.pdf</a><span> </span>(for @gm users only)</p>
<p>Flutter (Dart)</p>
<h4>其他提示</h4>
<p>Command + Shift + . (toggle hidden folders and files)</p>
<br/>W14 &lt;&lt;<span> </span><a href="http://mde.tw/wcmj2020/content/W14.html">Previous</a><span> </span><a href="http://mde.tw/wcmj2020/content/W15-W18.html">Next</a><span> </span>&gt;&gt; W15-W18</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
<br/>w14 &lt;&lt;<a href="https://50833129.github.io/wcmj2020/content/w14.html">Previous</a><a href="https://50833129.github.io/wcmj2020/content/%E7%9B%B4%E6%8E%A5%E5%9C%A8%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%B5%B1%E5%BB%BA%E7%AB%8B%E7%B6%B2%E9%9A%9B%E5%85%A7%E5%AE%B9%E7%AE%A1%E7%90%86%E5%90%88%E7%94%A8%E7%B3%BB%E7%B5%B1.html">Next</a>&gt;&gt; 直接在操作系統建立網際內容管理合用系統</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
<p></p>
<div class="container"><nav>
<div id="tipue_search_content">MacBook 操作指南 &lt;&lt;<span> </span><a href="https://50833129.github.io/wcmj2020/content/MacBook%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html">Previous</a><br/>
<h1>直接在操作系統建立網際內容管理合用系統</h1>
<div id="tipue_search_content">
<p>Windows 10 64 位元操作系統</p>
<p>安裝 Python 3.8.3 與 pip</p>
<p>至 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> 下載 Python 3.8.3<span> </span><a href="https://www.python.org/ftp/python/3.8.3/python-3.8.3-amd64.exe">Windows x86-64 executable installer</a></p>
<p>可以直接選擇安裝 pip 與所有選項內容</p>
<p>安裝 Git</p>
<p>利用 <a href="https://github.com/git-for-windows/git/releases/download/v2.26.2.windows.1/Git-2.26.2-64-bit.exe">64-bit Git for Windows Setup</a> 安裝 Git 工具.</p>
<p>安裝 CMSiMDE 所需模組</p>
<p>利用 cmd 開啟命令列視窗, 以 pip 安裝 flask flask_cors lxml bs4 markdown pelican leo 等模組</p>
<p>pip install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Ubuntu 20.04 操作系統 (請下載<a href="https://drive.google.com/open?id=13Gqwyj0CGR6wa9dZg_BmlCLv5cNYWQJ_"><span> </span>W12 Virtualbox 虛擬主機檔案</a>)</p>
<p>Ubuntu 20.04 同時存在 Python 2.7 與 Python 3.8.2,  CMSiMDE 只相容於 Python 3.8.2, 因此啟動指令必須使用:</p>
<p>python3 wsgi.py</p>
<p>與 </p>
<p>pip3 install <span> flask flask_cors lxml bs4 markdown pelican leo</span></p>
<p>Mac OS X 操作系統</p>
<p>與 Ubuntu 20.04 類似.</p>
<br/>Blogger API &lt;&lt;<span> </span><a href="http://mde.tw/wcmj2020/content/Blogger%20API.html">Previous</a><span> </span><a href="http://mde.tw/wcmj2020/content/MacBook%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html">Next</a><span> </span>&gt;&gt; MacBook 操作指南</div>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
<p></p>
<p></p>
</div>
</div>
</div>
</nav></div>
<p><br/><span>MacBook 操作指南 &lt;&lt;<span> </span></span><a href="https://50833129.github.io/wcmj2020/content/MacBook%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97.html">Previous</a><span></span></p>
<div class="container">
<div class="row pt-3 mx-auto">
<p>Copyright ©2020 All rights reserved | This template is made with<span> </span><i aria-hidden="true" class="icon-heart"></i><span> </span>by<span> </span><a href="https://colorlib.com/" target="_blank">Colorlib</a></p>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>