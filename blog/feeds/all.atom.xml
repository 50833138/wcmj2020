<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CMSimfly 網際內容管理</title><link href="./" rel="alternate"></link><link href=".%5Cfeeds/all.atom.xml" rel="self"></link><id>./</id><updated>2020-05-22T15:00:00+08:00</updated><entry><title>20200522 test</title><link href=".%5C20200522test.html" rel="alternate"></link><published>2020-05-22T15:00:00+08:00</published><updated>2020-05-22T15:00:00+08:00</updated><author><name>50833138</name></author><id>tag:None,2020-05-22:.\20200522test.html</id><content type="html">&lt;p&gt;2018 Fall 一開始, 在一台已經 10 年的 32 位元的 Windows 7 操作系統中工作. 可攜的 Python 3.7.0 仍然可以配置, Leo Editor、PyQt5、flask、Markdown、pelican 與 bs4 的安裝, 也都沒有問題. 只有 Eric6 因為缺少必要模組與 Python 3.7.0 對應的 pyqt5-tools, 因此沒有安裝.&lt;/p&gt;
</content><category term="Misc"></category><category term="test"></category></entry><entry><title>使用CMSIMDE</title><link href=".%5CCMSIMDE.html" rel="alternate"></link><published>2020-05-22T13:30:00+08:00</published><updated>2020-05-22T13:30:00+08:00</updated><author><name>50833138</name></author><id>tag:None,2020-05-22:.\CMSIMDE.html</id><summary type="html">&lt;p&gt;https://github.com/mdecourse/cmsimde.git 是一套利用 Python 解譯程式語言所編寫的網際內容管理系統, 使用者可以用來建立動態網站, 靜態網站, 網誌與網際簡報系統.&lt;/p&gt;
&lt;p&gt;程式語言就其執行的方式, 可以分為編譯式與解譯式等兩種.&lt;/p&gt;
&lt;p&gt;編譯式語言例如: C 程式語言&lt;/p&gt;
&lt;p&gt;解譯式語言例如: Python 程式語言&lt;/p&gt;
&lt;p&gt;編寫程式語言是工程師與電腦溝通的途徑之一, 工程師編寫計算機程式在電腦上執行, 可以透過電腦強大與重複的運算能力來解決問題.&lt;/p&gt;
&lt;p&gt;CMSiMDE 就是工程師希望將各種與產品開發的過程資料, 存放在網站上, 除了可用於工程師之間的溝通外, 還能夠將產品開發的細節, 或者特定工具的使用詳細記錄, 以作為往後的參考.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;https://github.com/mdecourse/cmsimde.git 是一套利用 Python 解譯程式語言所編寫的網際內容管理系統, 使用者可以用來建立動態網站, 靜態網站, 網誌與網際簡報系統.&lt;/p&gt;
&lt;p&gt;程式語言就其執行的方式, 可以分為編譯式與解譯式等兩種.&lt;/p&gt;
&lt;p&gt;編譯式語言例如: C 程式語言&lt;/p&gt;
&lt;p&gt;解譯式語言例如: Python 程式語言&lt;/p&gt;
&lt;p&gt;編寫程式語言是工程師與電腦溝通的途徑之一, 工程師編寫計算機程式在電腦上執行, 可以透過電腦強大與重複的運算能力來解決問題.&lt;/p&gt;
&lt;p&gt;CMSiMDE 就是工程師希望將各種與產品開發的過程資料, 存放在網站上, 除了可用於工程師之間的溝通外, 還能夠將產品開發的細節, 或者特定工具的使用詳細記錄, 以作為往後的參考.&lt;/p&gt;


&lt;p&gt;如何使用 CMSiMDE
(1) 以子模組的方式使用 CMSiMDE&lt;/p&gt;
&lt;p&gt;將 Github 倉儲 git clone 到近端工作區之後, 可以利用 git submodule add 指令將遠端倉儲中的 CMSiMDE 程式碼納為倉儲中的 cmsimde 子目錄, 並且保持與遠端原始碼的版次關聯 (也就是能夠指定採用遠端特定版本的 CMSiMDE 程式碼).&lt;/p&gt;
&lt;p&gt;好處: 子模組可以與遠端官方的倉儲保持關聯, 一旦 CMSiMDE 更新版本, 使用者可以利用 git pull 直接拉下遠端 CMSiMDE 的最新程式碼.&lt;/p&gt;
&lt;p&gt;壞處: 使用者若要 git clone 遠端的倉儲至近端, 需要加上 --recurse-submodules 選項&lt;/p&gt;
&lt;p&gt;(2) 不以子模組的方式使用 CMSiMDE&lt;/p&gt;
&lt;p&gt;假如不需要保持與遠端 CMSiMDE 倉儲特定版次的關聯性, 可以直接將 CMSiMDE 倉儲中的檔案, 直接放入 cmsimde 目錄, 並將其中 up_dir 的內容複製到希望建立網頁的倉儲主目錄中即可.&lt;/p&gt;
&lt;p&gt;好處: 使用者可以直接使用 git clone 指令, 拉下遠端倉儲的所有資料.&lt;/p&gt;
&lt;p&gt;壞處: 失去與遠端 CMSiMDE 倉儲的關聯, 假如要使用最新改版後的 CMSiMDE 原始碼, 必須另外 git clone 然後再取代倉儲中 cmsimde 的所有檔案.&lt;/p&gt;</content><category term="Misc"></category><category term="CMSIMDE"></category></entry><entry><title>以ssh維護倉儲</title><link href=".%5C%E4%BB%A5ssh%E7%B6%AD%E8%AD%B7%E5%80%89%E5%84%B2.html" rel="alternate"></link><published>2020-05-22T13:30:00+08:00</published><updated>2020-05-22T13:30:00+08:00</updated><author><name>50833138</name></author><id>tag:None,2020-05-22:.\以ssh維護倉儲.html</id><summary type="html">&lt;p&gt;由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.&lt;/p&gt;


&lt;ol&gt;
&lt;li&gt;下載 Putty 工具組&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;從 https://www.chiark.greenend.org.uk/~sgtatham/putty/ 下載一般版, 或從 http://jakub.kotrla.net/putty/ 下載特殊的可攜版本.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後, 以 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ssh-keygen -t rsa -b 4096 -C "使用者學號"
在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key&lt;/p&gt;
&lt;p&gt;之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&amp;gt; SSH and GPG keys 頁面下.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;修改啟動的 start.bat 加入下列設定:&lt;/p&gt;
&lt;p&gt;set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe
4. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.&lt;/p&gt;
&lt;p&gt;開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&amp;gt;SSH-&amp;gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. &lt;/p&gt;
&lt;p&gt;並在 Connection-&amp;gt;Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;之後確定 home 下的 .ssh 目錄中的 config 設定檔案為:&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;no proxy at home&lt;/h1&gt;
&lt;h1&gt;ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p&lt;/h1&gt;
&lt;h1&gt;set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup&lt;/h1&gt;
&lt;p&gt;ProxyCommand y:/putty/plink.exe github.com %h %p&lt;/p&gt;
&lt;p&gt;Host github.com
    User git
    Port 22
    Hostname github.com&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;openssh&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;IdentityFile&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;y:\home\.ssh\id_rsa_mdecourse&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;under&lt;/span&gt; &lt;span class="n"&gt;putty&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="k"&gt;session&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;plink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;need&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;IdentityFile&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;y:\home\.ssh\mdecourse_putty_private.ppk&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;TCPKeepAlive&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;span class="n"&gt;IdentitiesOnly&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[submodule]
    active = .
[remote "origin"]
    #url = https://github.com/mdecourse/wcmj2020.git
    url = git@github.com:mdecourse/wcmj2020.git
    fetch = +refs/heads/&lt;em&gt;:refs/remotes/origin/&lt;/em&gt;
[branch "master"]
    remote = origin
    merge = refs/heads/master
[submodule "cmsimde"]
    url = https://github.com/mdecourse/cmsimde.git
之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push.&lt;/p&gt;</content><category term="Misc"></category><category term="ssh"></category></entry><entry><title>2018 Fall CP 課程</title><link href=".%5C2018-Fall-32-bit-Windows.html" rel="alternate"></link><published>2018-09-10T11:00:00+08:00</published><updated>2018-09-10T11:00:00+08:00</updated><author><name>50833138</name></author><id>tag:None,2018-09-10:.\2018-Fall-32-bit-Windows.html</id><summary type="html">&lt;p&gt;2018 Fall 一開始, 在一台已經 10 年的 32 位元的 Windows 7 操作系統中工作. 可攜的 Python 3.7.0 仍然可以配置, Leo Editor、PyQt5、flask、Markdown、pelican 與 bs4 的安裝, 也都沒有問題. 只有 Eric6 因為缺少必要模組與 Python 3.7.0 對應的 pyqt5-tools, 因此沒有安裝.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2018 Fall 一開始, 在一台已經 10 年的 32 位元的 Windows 7 操作系統中工作. 可攜的 Python 3.7.0 仍然可以配置, Leo Editor、PyQt5、flask、Markdown、pelican 與 bs4 的安裝, 也都沒有問題. 只有 Eric6 因為缺少必要模組與 Python 3.7.0 對應的 pyqt5-tools, 因此沒有安裝.&lt;/p&gt;


&lt;h2&gt;電腦規格&lt;/h2&gt;
&lt;p&gt;目前系上已經沒有 32 位元 Windows 操作系統的電腦, 所以先前只要有學生提到所使用的電腦是舊型 32 位元的 Windows XP 或 Windows 7, 都無法提供相應的可攜程式系統.&lt;/p&gt;
&lt;p&gt;但是, 當您桌上就只一台早期 Sony 推出的 VGC-LM26T 電腦, 採用 Intel core 2 Duo T8100 2.1 GHz 裝載 32 位元 Windows 7, 記憶體只有 2GB 的老舊電腦.&lt;/p&gt;
&lt;p&gt;夠用嗎?&lt;/p&gt;
&lt;p&gt;當然可以, 使用的是特別製作的 &lt;a href="https://mde1a1.kmol.info/2017fall/raw/p37_32.7z?name=c272a694f98180f8d1272b43f7d7b4fdd8f7f550"&gt;32 位元可攜系統&lt;/a&gt;, 除了不支援 Eric6 之外, 其餘功能都與 64 位元的  &lt;a href="https://drive.google.com/file/d/1DWtyoUhl8CycKJ8uulB3viRXE39KqpE1/view?usp=sharing"&gt;p37&lt;/a&gt; 相同.&lt;/p&gt;
&lt;h2&gt;工作流程&lt;/h2&gt;
&lt;p&gt;從 2018 Fall 開始, 前半學期希望每位計算機程課程的學員, 都能透過 &lt;a href="http://mde.tw/cp2018/content/"&gt;2018 計算機程式教材&lt;/a&gt; 內容, 深入學習 Python 3 各種程式語法, 利用 &lt;a href="https://github.com/chiamingyen/cmsimfly"&gt;CMSimfly&lt;/a&gt;、&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; 與 &lt;a href="https://revealjs.com/"&gt;Reveal.js&lt;/a&gt;, 熟悉如何在 &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; 配置自己的網站、網誌與網際簡報系統.&lt;/p&gt;
&lt;p&gt;使用時, 啟動隨身系統的 start.bat, 利用命令列指令, git clone https://github.com/mdecourse/2018fall, 然後將內容配置在各自的 &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; 帳號下.&lt;/p&gt;
&lt;h2&gt;程式專案&lt;/h2&gt;
&lt;p&gt;早在 1999 年, 就已經開始進行所謂&lt;a href="https://webcache.googleusercontent.com/search?q=cache:sqYPNC8_mgoJ:https://www.most.gov.tw/sci/ch/detail%3Farticle_uid%3D4ee546e6-73fa-43a8-b1df-a5a0a1fe1824%26menu_id%3D0bac23e6-b3df-4fe0-b152-2e1050eb2f2c%26content_type%3DP%26view_mode%3DlistView+&amp;amp;cd=6&amp;amp;hl=zh-TW&amp;amp;ct=clnk&amp;amp;gl=tw"&gt;網際機械設計資源中心&lt;/a&gt;的構建, 想像中的資源中心是一套網際專家系統, 包含各式機械設計流程中所需的模組, 全部依附在一個相對穩定, 可以持續改進的核心架構下, 類似 &lt;a href="https://github.com/jhpyle/docassemble"&gt;docassemble&lt;/a&gt; 的一套系統.&lt;/p&gt;
&lt;p&gt;將近二十年過去, &lt;a href="https://webcache.googleusercontent.com/search?q=cache:sqYPNC8_mgoJ:https://www.most.gov.tw/sci/ch/detail%3Farticle_uid%3D4ee546e6-73fa-43a8-b1df-a5a0a1fe1824%26menu_id%3D0bac23e6-b3df-4fe0-b152-2e1050eb2f2c%26content_type%3DP%26view_mode%3DlistView+&amp;amp;cd=6&amp;amp;hl=zh-TW&amp;amp;ct=clnk&amp;amp;gl=tw"&gt;網際機械設計資源中心&lt;/a&gt;始終仍只有片段系統, 其中包含 &lt;a href="https://github.com/chiamingyen/cmsimfly"&gt;CMSimfly&lt;/a&gt;、&lt;a href="https://github.com/chiamingyen/pygrouf"&gt;Pygrouf&lt;/a&gt; 與 &lt;a href="https://github.com/KmolYuan/Pyslvs-PyQt5"&gt;Pyslvs&lt;/a&gt; (&lt;a href="http://www.pyslvs.com/content/"&gt;Pyslvs 手冊&lt;/a&gt;)等相關專案.&lt;/p&gt;
&lt;p&gt;就如同&lt;a href="http://blog.ez2learn.com/2009/06/27/how-to-write-useful-program/"&gt;如何寫出有用的程式?&lt;/a&gt; 一文中所述, "沒有興趣不要來念資工" 是一句非常貼切的警語, 當學生對於程式設計提不起興趣, 沒有將所學的各式語法、資料結構與演算法, 套用在自己非常有興趣的領域中, 用來解決各式問題的話, 日復一日, 我們還是寫不出任何有用的程式!&lt;/p&gt;
&lt;h2&gt;早該起頭的重要工作&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.quora.com/Why-is-programming-so-important-in-the-modern-world"&gt;計算機程式的重要性&lt;/a&gt;其實已經無需爭辯, 人類未來的許多工作都是透過網路與數位運算達成, 既知趨勢如此, 每一位工程師就該越早起頭原本就該進行的重要工作, 透過計算機程式來解決問題, 構築一個值得長期投注心力的程式專案.&lt;/p&gt;</content><category term="Misc"></category><category term="2018FallCP"></category></entry></feed>